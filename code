#include<bits/stdc++.h>
using namespace std;


class Book {
    private:
        static int Database_BookID;
    public: 
        int bookID;
        string title;
        string author;
        bool availability;
//      CONSTRUCTOR
        Book (string t, string a, bool avail = true) : title(t), author(a), availability(avail) {
            bookID = Database_BookID++;
        }

//      GETTING INFORMATION OF THE BOOK
        void get_data(){
            cout << "ID: " << bookID << "\n";
            cout << "Book's title: " << title << "\n";
            cout << "Book's author: " << author << "\n";
            cout << (availability) ? "Can be borrowed" : "Can't be borrowed";
        }
};

//      initialize static member:
int Book::Database_BookID = 1;

class User {
    private:
        static int Database_UserID;
    public:
        int UserID;
        string name;
        vector<Book> borrowed_books;

        User (string n) : name(n){
            UserID = Database_UserID++;
        }
        
        void borrow_book(book t) {
            borrowed_books.push_back(t);
        }
        
        void return_book(book t) {
            bool check = false;
            for (int i = 0; i < borrowed_books.size(); i++){
                if (borrowed_books[i]->title == t->title){
                    check = true;
                    borrowed_books.erase(borrowed_books.begin() + i);
                }
                if (check){
                    cout << "Book has been returned!";
                }
                else
                    cout << "There is no book!";
            }
            if
        }
        
        void show_borrowed_books(){
            for (auto book : borrowed_books){
                cout << borrowed_books->title;
            }
        }
        
        void get_data(){
            cout << "ID: " << UserID << "\n";
            cout << "Name: " << name << "\n";
            User.show_borrowed_books();
        }
};

//initialize static member
int User::Database_UserID = 1;

int main() {
    Book book1 ("Godfather", "Mario Ruzo");
    book1.get_data();
}
